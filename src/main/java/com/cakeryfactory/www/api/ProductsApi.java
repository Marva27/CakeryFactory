/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cakeryfactory.www.api;

import com.cakeryfactory.www.model.Error;
import com.cakeryfactory.www.model.Product;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-04-06T00:25:37.086418600-05:00[America/Chicago]")
@Validated
@Api(value = "products", description = "the products API")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /products/addNew : Add new product
     * To add a new product in the inventory
     *
     * @param product Structure of a product (required)
     * @return Product added successfully (status code 200)
     *         or Authorization required to add a new product (status code 401)
     *         or Product name is required (status code 400)
     */
    @ApiOperation(value = "Add new product", nickname = "productsAddNewPost", notes = "To add a new product in the inventory", response = Product.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Product added successfully", response = Product.class),
        @ApiResponse(code = 401, message = "Authorization required to add a new product", response = Error.class),
        @ApiResponse(code = 400, message = "Product name is required", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products/addNew",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Product> productsAddNewPost(@ApiParam(value = "Structure of a product", required = true) @Valid @RequestBody Product product) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"sizesOffered\" : [ \"8 Inch Round Cake (15-20 Servings)\", \"8 Inch Round Cake (15-20 Servings)\" ], \"productId\" : 101, \"icingColorsOffered\" : [ \"Ivory\", \"Ivory\" ], \"flavorsOffered\" : [ \"Strawberry\", \"Strawberry\" ], \"allowMultipleIcingColors\" : true, \"productName\" : \"Baby Shark Cake\", \"productPrice\" : 101.45, \"otherCustomFields\" : [ \"Name\", \"Name\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/getAll : Get All Products
     * To get all existing products
     *
     * @return All products retrieved successfully (status code 200)
     *         or No products found (status code 404)
     */
    @ApiOperation(value = "Get All Products", nickname = "productsGetAllGet", notes = "To get all existing products", response = Product.class, responseContainer = "List", tags={ "Products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All products retrieved successfully", response = Product.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No products found", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/getAll",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Product>> productsGetAllGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"sizesOffered\" : [ \"8 Inch Round Cake (15-20 Servings)\", \"8 Inch Round Cake (15-20 Servings)\" ], \"productId\" : 101, \"icingColorsOffered\" : [ \"Ivory\", \"Ivory\" ], \"flavorsOffered\" : [ \"Strawberry\", \"Strawberry\" ], \"allowMultipleIcingColors\" : true, \"productName\" : \"Baby Shark Cake\", \"productPrice\" : 101.45, \"otherCustomFields\" : [ \"Name\", \"Name\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /products/{productId} : Delete existing product
     * To delete an existing product in the inventory
     *
     * @param productId Unique id of the product (required)
     * @return Product deleted successfully (status code 200)
     *         or Product not found (status code 404)
     */
    @ApiOperation(value = "Delete existing product", nickname = "productsProductIdDelete", notes = "To delete an existing product in the inventory", response = Product.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Product deleted successfully", response = Product.class),
        @ApiResponse(code = 404, message = "Product not found", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Product> productsProductIdDelete(@ApiParam(value = "Unique id of the product", required = true) @PathVariable("productId") Integer productId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"sizesOffered\" : [ \"8 Inch Round Cake (15-20 Servings)\", \"8 Inch Round Cake (15-20 Servings)\" ], \"productId\" : 101, \"icingColorsOffered\" : [ \"Ivory\", \"Ivory\" ], \"flavorsOffered\" : [ \"Strawberry\", \"Strawberry\" ], \"allowMultipleIcingColors\" : true, \"productName\" : \"Baby Shark Cake\", \"productPrice\" : 101.45, \"otherCustomFields\" : [ \"Name\", \"Name\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/{productId} : Get existing product
     * To retrieve a product from the inventory
     *
     * @param productId Unique id of the product (required)
     * @return Product retrieved successfully (status code 200)
     *         or Product not found (status code 404)
     */
    @ApiOperation(value = "Get existing product", nickname = "productsProductIdGet", notes = "To retrieve a product from the inventory", response = Product.class, tags={ "Products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Product retrieved successfully", response = Product.class),
        @ApiResponse(code = 404, message = "Product not found", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Product> productsProductIdGet(@ApiParam(value = "Unique id of the product", required = true) @PathVariable("productId") Integer productId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"sizesOffered\" : [ \"8 Inch Round Cake (15-20 Servings)\", \"8 Inch Round Cake (15-20 Servings)\" ], \"productId\" : 101, \"icingColorsOffered\" : [ \"Ivory\", \"Ivory\" ], \"flavorsOffered\" : [ \"Strawberry\", \"Strawberry\" ], \"allowMultipleIcingColors\" : true, \"productName\" : \"Baby Shark Cake\", \"productPrice\" : 101.45, \"otherCustomFields\" : [ \"Name\", \"Name\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /products/{productId} : Update existing product
     * To update an existing product in the inventory
     *
     * @param productId Unique id of the product (required)
     * @param product Structure of a product (required)
     * @return Product updated successfully (status code 200)
     *         or Authorization required to add a new product (status code 401)
     *         or Product name is required (status code 400)
     */
    @ApiOperation(value = "Update existing product", nickname = "productsProductIdPut", notes = "To update an existing product in the inventory", response = Product.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "Products", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Product updated successfully", response = Product.class),
        @ApiResponse(code = 401, message = "Authorization required to add a new product", response = Error.class),
        @ApiResponse(code = 400, message = "Product name is required", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{productId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Product> productsProductIdPut(@ApiParam(value = "Unique id of the product", required = true) @PathVariable("productId") Integer productId,@ApiParam(value = "Structure of a product", required = true) @Valid @RequestBody Product product) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"sizesOffered\" : [ \"8 Inch Round Cake (15-20 Servings)\", \"8 Inch Round Cake (15-20 Servings)\" ], \"productId\" : 101, \"icingColorsOffered\" : [ \"Ivory\", \"Ivory\" ], \"flavorsOffered\" : [ \"Strawberry\", \"Strawberry\" ], \"allowMultipleIcingColors\" : true, \"productName\" : \"Baby Shark Cake\", \"productPrice\" : 101.45, \"otherCustomFields\" : [ \"Name\", \"Name\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
